---
- name: Install Docker-py
  pip:
    name: docker-py
    state: present

- include: clean-up.yml

- name: "Deploy Portainer to {{ inventory_hostname }}"
  docker_container:
    name: portainer
    image: "portainer/portainer:{{ version }}"
    state: started
    detach: true
    recreate: yes
    restart_policy: always
    published_ports:
      - "{{ host_port }}:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{ persistent_data_path }}"

- name: Wait for container
  wait_for:
    port: "{{ host_port }}"
    host: "{{ inventory_hostname }}"

- include: admin.yml
  when: admin_user and admin_password is defined

- name: Define Endpoints
  shell: |
    curl --silent --show-error -o /dev/null -w "%{http_code}" {{ portainer_endpoint }}/endpoints \
      -H "Authorization: Bearer {{ (auth_token.content|from_json).jwt }}" \
      -F "Name={{ item.name }}" \
      -F "URL={{ item.url }}" \
      -F "EndpointType=1"
  args:
    warn: False
  with_items:
    - "{{ endpoints | list }}"
  when: endpoints is defined
  register: response
  #failed_when: response.stdout.find("200") != -1

- name: "TESTING, TEST"
  debug: msg="{{ response }}"

- name: Configure Portainer settings
  uri:
    url: "{{ portainer_endpoint }}/settings"
    method: PUT
    return_content: yes
    headers:
      Authorization: "{{ (auth_token.content|from_json).jwt }}"
    body_format: json
    body: "{{ lookup('template','settings.json.j2') }}"
  when: configure_settings

- include: registry.yml
  when: configure_registry